# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n 
# para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(num_1): # Funci√≥n recursiva 
    if num_1 == 0 or num_1 == 1:      # Caso base: el factorial de 0 o 1 es 1
        return 1
    else:
        return num_1 * factorial(num_1 - 1)  # Llamada recursiva

num = int(input("Ingrese un n√∫mero entero positivo: ")) # Se solicita al usuario un n√∫mero entero positivo

# Se verifica que el n√∫mero sea mayor o igual a 1
if num < 1:
    print("Debe ingresar un n√∫mero mayor o igual a 1.")  # Mensaje si el n√∫mero no es v√°lido
else:
    for i in range(1, num + 1):               # Se recorre desde 1 hasta el n√∫mero ingresado
        print(f"Factorial de {i} = {factorial(i)}")  # Se muestra el factorial de cada n√∫mero



# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# Funci√≥n recursiva que calcula el n√∫mero de Fibonacci en la posici√≥n n
def fibonacci(pisicion):
    if pisicion == 0:                 # Caso base 1: fibonacci(0) = 0
        return 0
    elif pisicion == 1:               # Caso base 2: fibonacci(1) = 1
        return 1
    else:
        return fibonacci(pisicion - 1) + fibonacci(pisicion - 2)  # Llamadas recursivas

# Solicita al usuario una posici√≥n entera no negativa
pos_ingresada = int(input("Ingrese un n√∫mero (entero no negativo), correspondiente a la posici√≥n para la serie Fibonacci: "))

# Verifica que la posici√≥n ingresada sea v√°lida (mayor o igual a 0)
if pos_ingresada < 0:
    print("Por favor, ingrese un n√∫mero mayor o igual a 0.")
else:
    print(f"Serie de Fibonacci hasta la posici√≥n {pos_ingresada}:")
    for i in range(pos_ingresada + 1):                     # Imprime la serie desde 0 hasta pos
        print(fibonacci(i), end=" ")             # Muestra cada valor separado por espacios
    print()                                  



# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). 

# Funci√≥n recursiva que calcula la potencia de una base elevada a un exponente
def potencia(base, exponente):
    if exponente == 0:                          # Caso base: cualquier n√∫mero elevado a 0 es 1
        return 1
    else:
        return base * potencia(base, exponente - 1)  # Paso recursivo: base * base^(exponente - 1)

# Solicita al usuario que ingrese la base (puede ser decimal)
base = float(input("Ingrese la base: "))

# Solicita al usuario que ingrese el exponente (entero no negativo)
exponente = int(input("Ingrese el exponente (entero no negativo): "))

# Verifica que el exponente sea v√°lido (mayor o igual a 0)
if exponente < 0:
    print("El exponente debe ser un n√∫mero entero no negativo.")  # Error si es negativo
else:
    resultado = potencia(base, exponente)  # Calcula la potencia usando recursividad
    print(f"{base} elevado a la {exponente} es {resultado}")  # Muestra el resultado



# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
# y devuelva su representaci√≥n en binario como una cadena de texto.

# Funci√≥n recursiva que convierte un n√∫mero decimal a binario
def decimal_a_binario(n):
    if n == 0:
        return ""  # Al llegar a 0, detiene la recursi√≥n y devuelve cadena vac√≠a
    else:
        return decimal_a_binario(n // 2) + str(n % 2) # Divide el n√∫mero entre 2 y concatena el bit (resto) al final

def convertir_a_binario(n): # Corrige el caso especial para n = 0 devolviendo "0"
    if n == 0:
        return "0"  # Representaci√≥n binaria de 0
    else:
        return decimal_a_binario(n)

# Solicita un n√∫mero entero positivo al usuario
numero = int(input("Ingrese un n√∫mero entero positivo (decimal) para convertir a binario: "))
if numero < 0:
    print("Debe ingresar un n√∫mero positivo.")  # Validaci√≥n
else:
    binario = convertir_a_binario(numero)  # Se obtiene la representaci√≥n binaria
    print(f"El n√∫mero {numero} en binario es: {binario}")  # Muestra el resultado



# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena 
# de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.

# Funci√≥n recursiva que verifica si una cadena es un pal√≠ndromo
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True  # Caso base: 0 o 1 letras siempre forman un pal√≠ndromo
    if palabra[0] != palabra[-1]:
        return False  # Si los extremos no coinciden, no es pal√≠ndromo
    return es_palindromo(palabra[1:-1])  # Llamada recursiva sin los extremos

# Solicita al usuario una palabra (sin espacios ni tildes)
texto = input("Ingrese una palabra sin espacios ni tildes: ").lower()

# Verifica si la palabra ingresada es un pal√≠ndromo
if es_palindromo(texto):
    print(f"La palabra '{texto}' es un pal√≠ndromo.")
else:
    print(f"La palabra '{texto}' NO es un pal√≠ndromo.")



# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero 
# positivo y devuelva la suma de todos sus d√≠gitos.

# Funci√≥n recursiva que suma los d√≠gitos de un n√∫mero entero positivo
def suma_digitos(n):
    if n < 10:
        return n  # Caso base: si tiene un solo d√≠gito, lo devuelve directamente
    else:
        return (n % 10) + suma_digitos(n // 10)  # Suma el √∫ltimo d√≠gito y llama con el resto

# Solicita al usuario un n√∫mero entero positivo
numero_ingresado = int(input("Ingrese un n√∫mero entero positivo: "))

# Valida que el n√∫mero sea positivo antes de llamar a la funci√≥n
if numero_ingresado < 0:
    print("Por favor, ingrese un n√∫mero positivo.")
else:
    resultado = suma_digitos(numero_ingresado)  # Llama a la funci√≥n recursiva
    print(f"La suma de los d√≠gitos de {numero_ingresado} es: {resultado}")



# 7) Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques 
# que necesita para construir toda la pir√°mide.

# Funci√≥n recursiva que calcula el total de bloques en una pir√°mide
def contar_bloques(n):
    if n == 1:
        return 1  # Caso base: si solo queda un bloque, devuelve 1
    else:
        return n + contar_bloques(n - 1)  # Suma bloques del nivel actual y niveles superiores

# Solicita al usuario el n√∫mero de bloques en el nivel m√°s bajo
nivel_inferior = int(input("Ingrese el n√∫mero de bloques del nivel m√°s bajo: "))

# Valida que el n√∫mero sea positivo antes de calcular
if nivel_inferior <= 0:
    print("Por favor, ingrese un n√∫mero positivo.")
else:
    total_bloques = contar_bloques(nivel_inferior)  # Calcula el total con la funci√≥n recursiva
    print(f"Total de bloques para la pir√°mide: {total_bloques}")



# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero 
# positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

# Funci√≥n recursiva que cuenta cu√°ntas veces aparece un d√≠gito en un n√∫mero entero positivo
def contar_digito(numero, digito):
    if numero == 0:
        return 0  # Caso base: si el n√∫mero es 0, no quedan d√≠gitos por contar
    else:
        cuenta = 1 if (numero % 10) == digito else 0  # Cuenta 1 si el √∫ltimo d√≠gito coincide con el d√≠gito buscado
        return cuenta + contar_digito(numero // 10, digito) # Suma la cuenta actual con la recursi√≥n sobre el n√∫mero sin el √∫ltimo d√≠gito

# Solicita al usuario un n√∫mero entero positivo y un d√≠gito (para contarlo)
numero_entero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito (0-9) a contar: "))

# Valida que el n√∫mero y el d√≠gito est√©n dentro de los rangos esperados
if numero_entero >= 0 and 0 <= digito <= 9:
    resultado = contar_digito(numero_entero, digito)  # Calcula la cantidad de apariciones
    print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero_entero}.")
else:
    print("Por favor, ingrese un n√∫mero positivo y un d√≠gito v√°lido entre 0 y 9.")